/**
 * THIS FILE IS AUTOMATICALLY GENERATED FROM: https://testapi.artlighthouse.ge/api/schema
 * DO NOT EDIT MANUALLY
 */

import axios from "../axios";
import type {
  Address,
  PatchedAddressUpdateRequest,
  AddressRequest,
  PasswordChangeRequest,
  UserLoginRequest,
  User,
  PatchedUserUpdateRequest,
  UserRegistrationRequest,
  PasswordResetRequestRequest,
  ResendVerificationCodeRequest,
  PasswordResetConfirmRequest,
  EmailVerificationRequest,
  ProductList,
  ProductDetail,
  ProductImage,
  ProductImageUploadRequest,
  PatchedProductCreateUpdateRequest,
  Attribute,
  Cart,
  AddToCartRequest,
  PatchedCartItemRequest,
  Category,
  ProductCreateUpdateRequest,
  Favorite,
  AddToFavoritesRequest,
} from "./interfaces";

export async function addressList(): Promise<Address[]> {
  const response = await axios.get(`/api/auth/addresses/`);
  return response.data;
}

export async function addressDetail(addressId: number): Promise<Address> {
  const response = await axios.get(`/api/auth/addresses/${addressId}/`);
  return response.data;
}

export async function addressDelete(addressId: number): Promise<Record<string, any>> {
  const response = await axios.delete(`/api/auth/addresses/${addressId}/delete/`);
  return response.data;
}

export async function addressUpdate(
  addressId: number,
  data: PatchedAddressUpdateRequest
): Promise<Address> {
  const response = await axios.patch(`/api/auth/addresses/${addressId}/update/`, data);
  return response.data;
}

export async function addressCreate(data: AddressRequest): Promise<Address> {
  const response = await axios.post(`/api/auth/addresses/create/`, data);
  return response.data;
}

export async function userChangePassword(
  data: PasswordChangeRequest
): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/change-password/`, data);
  return response.data;
}

export async function userLogin(data: UserLoginRequest): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/login/`, data);
  return response.data;
}

export async function userLogout(): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/logout/`);
  return response.data;
}

export async function userProfile(): Promise<User> {
  const response = await axios.get(`/api/auth/profile/`);
  return response.data;
}

export async function userProfileUpdate(data: PatchedUserUpdateRequest): Promise<User> {
  const response = await axios.patch(`/api/auth/profile/update/`, data);
  return response.data;
}

export async function userRegister(data: UserRegistrationRequest): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/register/`, data);
  return response.data;
}

export async function requestPasswordReset(
  data: PasswordResetRequestRequest
): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/request-password-reset/`, data);
  return response.data;
}

export async function resendVerificationCode(
  data: ResendVerificationCodeRequest
): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/resend-verification/`, data);
  return response.data;
}

export async function resetPassword(
  data: PasswordResetConfirmRequest
): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/reset-password/`, data);
  return response.data;
}

export async function verifyEmail(data: EmailVerificationRequest): Promise<Record<string, any>> {
  const response = await axios.post(`/api/auth/verify-email/`, data);
  return response.data;
}

export async function productList(
  attributes?: string,
  category?: string,
  inStock?: boolean,
  isFeatured?: boolean,
  maxPrice?: number,
  minPrice?: number,
  ordering?: string,
  search?: string
): Promise<ProductList[]> {
  const response = await axios.get(
    `/api/products/${(() => {
      const parts = [
        attributes ? "attributes=" + encodeURIComponent(attributes) : null,
        category ? "category=" + encodeURIComponent(category) : null,
        inStock ? "in_stock=" + encodeURIComponent(inStock) : null,
        isFeatured ? "is_featured=" + encodeURIComponent(isFeatured) : null,
        maxPrice ? "max_price=" + encodeURIComponent(maxPrice) : null,
        minPrice ? "min_price=" + encodeURIComponent(minPrice) : null,
        ordering ? "ordering=" + encodeURIComponent(ordering) : null,
        search ? "search=" + encodeURIComponent(search) : null,
      ].filter(Boolean);
      return parts.length > 0 ? "?" + parts.join("&") : "";
    })()}`
  );
  return response.data;
}

export async function productDetail(productId: number): Promise<ProductDetail> {
  const response = await axios.get(`/api/products/${productId}/`);
  return response.data;
}

export async function productDelete(productId: number): Promise<Record<string, any>> {
  const response = await axios.delete(`/api/products/${productId}/delete/`);
  return response.data;
}

export async function productImageList(productId: number): Promise<ProductImage[]> {
  const response = await axios.get(`/api/products/${productId}/images/`);
  return response.data;
}

export async function productImageDelete(
  imageId: number,
  productId: number
): Promise<Record<string, any>> {
  const response = await axios.delete(`/api/products/${productId}/images/${imageId}/delete/`);
  return response.data;
}

export async function productImageUpload(
  productId: number,
  data: ProductImageUploadRequest
): Promise<ProductImage> {
  const response = await axios.post(`/api/products/${productId}/images/upload/`, data);
  return response.data;
}

export async function productUpdate(
  productId: number,
  data: PatchedProductCreateUpdateRequest
): Promise<ProductDetail> {
  const response = await axios.patch(`/api/products/${productId}/update/`, data);
  return response.data;
}

export async function attributeList(category?: number): Promise<Attribute[]> {
  const response = await axios.get(
    `/api/products/attributes/${category ? "?category=" + encodeURIComponent(category) : ""}`
  );
  return response.data;
}

export async function cartGet(): Promise<Cart> {
  const response = await axios.get(`/api/products/cart/`);
  return response.data;
}

export async function cartAddItem(data: AddToCartRequest): Promise<Cart> {
  const response = await axios.post(`/api/products/cart/add/`, data);
  return response.data;
}

export async function cartClear(): Promise<Cart> {
  const response = await axios.delete(`/api/products/cart/clear/`);
  return response.data;
}

export async function cartRemoveItem(itemId: number): Promise<Cart> {
  const response = await axios.delete(`/api/products/cart/items/${itemId}/delete/`);
  return response.data;
}

export async function cartUpdateItem(itemId: number, data: PatchedCartItemRequest): Promise<Cart> {
  const response = await axios.patch(`/api/products/cart/items/${itemId}/update/`, data);
  return response.data;
}

export async function categoryList(): Promise<Category[]> {
  const response = await axios.get(`/api/products/categories/`);
  return response.data;
}

export async function productCreate(data: ProductCreateUpdateRequest): Promise<ProductDetail> {
  const response = await axios.post(`/api/products/create/`, data);
  return response.data;
}

export async function favoritesList(): Promise<Favorite[]> {
  const response = await axios.get(`/api/products/favorites/`);
  return response.data;
}

export async function favoritesRemove(productId: number): Promise<Record<string, any>> {
  const response = await axios.delete(`/api/products/favorites/${productId}/remove/`);
  return response.data;
}

export async function favoritesAdd(data: AddToFavoritesRequest): Promise<Favorite> {
  const response = await axios.post(`/api/products/favorites/add/`, data);
  return response.data;
}

export async function favoritesToggle(data: AddToFavoritesRequest): Promise<any> {
  const response = await axios.post(`/api/products/favorites/toggle/`, data);
  return response.data;
}
